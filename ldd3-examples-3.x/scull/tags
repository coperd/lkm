!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBFLAGS	Makefile	/^  DEBFLAGS = -O -g -DSCULL_DEBUG # "-O" is needed to expand inlines$/;"	m
DEBFLAGS	Makefile	/^  DEBFLAGS = -O2$/;"	m
DECLARE_WAIT_QUEUE_HEAD	access.c	/^static DECLARE_WAIT_QUEUE_HEAD(scull_w_wait);$/;"	p	file:
DEFINE_PROC_SEQ_FILE	main.c	201;"	d	file:
DEFINE_PROC_SEQ_FILE	pipe.c	286;"	d	file:
DEFINE_SPINLOCK	access.c	/^static DEFINE_SPINLOCK(scull_c_lock);$/;"	p	file:
DEFINE_SPINLOCK	access.c	/^static DEFINE_SPINLOCK(scull_u_lock);$/;"	p	file:
DEFINE_SPINLOCK	access.c	/^static DEFINE_SPINLOCK(scull_w_lock);$/;"	p	file:
KERNELDIR	Makefile	/^KERNELDIR ?= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
LIMIT	pipe.c	270;"	d	file:
LIST_HEAD	access.c	/^static LIST_HEAD(scull_c_list);$/;"	p	file:
NUM	scull.h	101;"	d
PDEBUG	scull.h	27;"	d
PDEBUG	scull.h	31;"	d
PDEBUG	scull.h	34;"	d
PDEBUG	scull.h	37;"	d
PDEBUGG	scull.h	40;"	d
PDEBUGG	scull.h	41;"	d
PWD	Makefile	/^PWD       := $(shell pwd)$/;"	m
SCULL_IOCGQSET	scull.h	158;"	d
SCULL_IOCGQUANTUM	scull.h	157;"	d
SCULL_IOCHQSET	scull.h	164;"	d
SCULL_IOCHQUANTUM	scull.h	163;"	d
SCULL_IOCQQSET	scull.h	160;"	d
SCULL_IOCQQUANTUM	scull.h	159;"	d
SCULL_IOCRESET	scull.h	143;"	d
SCULL_IOCSQSET	scull.h	154;"	d
SCULL_IOCSQUANTUM	scull.h	153;"	d
SCULL_IOCTQSET	scull.h	156;"	d
SCULL_IOCTQUANTUM	scull.h	155;"	d
SCULL_IOCXQSET	scull.h	162;"	d
SCULL_IOCXQUANTUM	scull.h	161;"	d
SCULL_IOC_MAGIC	scull.h	140;"	d
SCULL_IOC_MAXNR	scull.h	175;"	d
SCULL_MAJOR	scull.h	44;"	d
SCULL_NR_DEVS	scull.h	48;"	d
SCULL_N_ADEVS	access.c	338;"	d	file:
SCULL_P_BUFFER	scull.h	76;"	d
SCULL_P_IOCQSIZE	scull.h	172;"	d
SCULL_P_IOCTSIZE	scull.h	171;"	d
SCULL_P_NR_DEVS	scull.h	52;"	d
SCULL_QSET	scull.h	69;"	d
SCULL_QUANTUM	scull.h	65;"	d
TYPE	scull.h	100;"	d
_SCULL_H_	scull.h	19;"	d
access_key	scull.h	/^	unsigned int access_key;  \/* used by sculluid and scullpriv *\/$/;"	m	struct:scull_dev	access:public
async_queue	pipe.c	/^        struct fasync_struct *async_queue; \/* asynchronous readers *\/$/;"	m	struct:scull_pipe	typeref:struct:scull_pipe::fasync_struct	file:	access:public
buffer	pipe.c	/^        char *buffer, *end;                \/* begin of buf, end of buf *\/$/;"	m	struct:scull_pipe	file:	access:public
buffersize	pipe.c	/^        int buffersize;                    \/* used in pointer arithmetic *\/$/;"	m	struct:scull_pipe	file:	access:public
cdev	pipe.c	/^        struct cdev cdev;                  \/* Char device structure *\/$/;"	m	struct:scull_pipe	typeref:struct:scull_pipe::cdev	file:	access:public
cdev	scull.h	/^	struct cdev cdev;	  \/* Char device structure		*\/$/;"	m	struct:scull_dev	typeref:struct:scull_dev::cdev	access:public
data	scull.h	/^	struct scull_qset *data;  \/* Pointer to first quantum set *\/$/;"	m	struct:scull_dev	typeref:struct:scull_dev::scull_qset	access:public
data	scull.h	/^	void **data;$/;"	m	struct:scull_qset	access:public
device	access.c	/^	struct scull_dev device;$/;"	m	struct:scull_listitem	typeref:struct:scull_listitem::scull_dev	file:	access:public
end	pipe.c	/^        char *buffer, *end;                \/* begin of buf, end of buf *\/$/;"	m	struct:scull_pipe	file:	access:public
fops	access.c	/^	struct file_operations *fops;$/;"	m	struct:scull_adev_info	typeref:struct:scull_adev_info::file_operations	file:	access:public
inq	pipe.c	/^        wait_queue_head_t inq, outq;       \/* read and write queues *\/$/;"	m	struct:scull_pipe	file:	access:public
key	access.c	/^	dev_t key;$/;"	m	struct:scull_listitem	file:	access:public
list	access.c	/^	struct list_head list;$/;"	m	struct:scull_listitem	typeref:struct:scull_listitem::list_head	file:	access:public
mutex	pipe.c	/^        struct mutex mutex;              \/* mutual exclusion semaphore *\/$/;"	m	struct:scull_pipe	typeref:struct:scull_pipe::mutex	file:	access:public
mutex	scull.h	/^	struct mutex mutex;     \/* mutual exclusion semaphore     *\/$/;"	m	struct:scull_dev	typeref:struct:scull_dev::mutex	access:public
name	access.c	/^	char *name;$/;"	m	struct:scull_adev_info	file:	access:public
next	scull.h	/^	struct scull_qset *next;$/;"	m	struct:scull_qset	typeref:struct:scull_qset::scull_qset	access:public
nreaders	pipe.c	/^        int nreaders, nwriters;            \/* number of openings for r\/w *\/$/;"	m	struct:scull_pipe	file:	access:public
nwriters	pipe.c	/^        int nreaders, nwriters;            \/* number of openings for r\/w *\/$/;"	m	struct:scull_pipe	file:	access:public
obj-m	Makefile	/^obj-m	:= scull.o$/;"	m
outq	pipe.c	/^        wait_queue_head_t inq, outq;       \/* read and write queues *\/$/;"	m	struct:scull_pipe	file:	access:public
qset	scull.h	/^	int qset;                 \/* the current array size *\/$/;"	m	struct:scull_dev	access:public
quantum	scull.h	/^	int quantum;              \/* the current quantum size *\/$/;"	m	struct:scull_dev	access:public
rp	pipe.c	/^        char *rp, *wp;                     \/* where to read, where to write *\/$/;"	m	struct:scull_pipe	file:	access:public
scull-objs	Makefile	/^scull-objs := main.o pipe.o access.o$/;"	m
scull_a_firstdev	access.c	/^static dev_t scull_a_firstdev;  \/* Where our range begins *\/$/;"	v	file:
scull_access_cleanup	access.c	/^void scull_access_cleanup(void)$/;"	f	signature:(void)
scull_access_cleanup	scull.h	/^void    scull_access_cleanup(void);$/;"	p	signature:(void)
scull_access_devs	access.c	/^} scull_access_devs[] = {$/;"	v	typeref:struct:scull_adev_info	file:
scull_access_init	access.c	/^int scull_access_init(dev_t firstdev)$/;"	f	signature:(dev_t firstdev)
scull_access_init	scull.h	/^int     scull_access_init(dev_t dev);$/;"	p	signature:(dev_t dev)
scull_access_setup	access.c	/^static void scull_access_setup (dev_t devno, struct scull_adev_info *devinfo)$/;"	f	file:	signature:(dev_t devno, struct scull_adev_info *devinfo)
scull_adev_info	access.c	/^static struct scull_adev_info {$/;"	s	file:
scull_adev_info::fops	access.c	/^	struct file_operations *fops;$/;"	m	struct:scull_adev_info	typeref:struct:scull_adev_info::file_operations	file:	access:public
scull_adev_info::name	access.c	/^	char *name;$/;"	m	struct:scull_adev_info	file:	access:public
scull_adev_info::sculldev	access.c	/^	struct scull_dev *sculldev;$/;"	m	struct:scull_adev_info	typeref:struct:scull_adev_info::scull_dev	file:	access:public
scull_c_device	access.c	/^static struct scull_dev scull_c_device;   $/;"	v	typeref:struct:scull_dev	file:
scull_c_lookfor_device	access.c	/^static struct scull_dev *scull_c_lookfor_device(dev_t key)$/;"	f	file:	signature:(dev_t key)
scull_c_open	access.c	/^static int scull_c_open(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_c_release	access.c	/^static int scull_c_release(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_cleanup_module	main.c	/^module_exit(scull_cleanup_module);$/;"	v
scull_cleanup_module	main.c	/^void scull_cleanup_module(void)$/;"	f	signature:(void)
scull_create_proc	main.c	/^static void scull_create_proc(void)$/;"	f	file:	signature:(void)
scull_dev	scull.h	/^struct scull_dev {$/;"	s
scull_dev::access_key	scull.h	/^	unsigned int access_key;  \/* used by sculluid and scullpriv *\/$/;"	m	struct:scull_dev	access:public
scull_dev::cdev	scull.h	/^	struct cdev cdev;	  \/* Char device structure		*\/$/;"	m	struct:scull_dev	typeref:struct:scull_dev::cdev	access:public
scull_dev::data	scull.h	/^	struct scull_qset *data;  \/* Pointer to first quantum set *\/$/;"	m	struct:scull_dev	typeref:struct:scull_dev::scull_qset	access:public
scull_dev::mutex	scull.h	/^	struct mutex mutex;     \/* mutual exclusion semaphore     *\/$/;"	m	struct:scull_dev	typeref:struct:scull_dev::mutex	access:public
scull_dev::qset	scull.h	/^	int qset;                 \/* the current array size *\/$/;"	m	struct:scull_dev	access:public
scull_dev::quantum	scull.h	/^	int quantum;              \/* the current quantum size *\/$/;"	m	struct:scull_dev	access:public
scull_dev::size	scull.h	/^	unsigned long size;       \/* amount of data stored here *\/$/;"	m	struct:scull_dev	access:public
scull_devices	main.c	/^struct scull_dev *scull_devices;	\/* allocated in scull_init_module *\/$/;"	v	typeref:struct:scull_dev
scull_follow	main.c	/^struct scull_qset *scull_follow(struct scull_dev *dev, int n)$/;"	f	signature:(struct scull_dev *dev, int n)
scull_fops	main.c	/^struct file_operations scull_fops = {$/;"	v	typeref:struct:file_operations
scull_getwritespace	pipe.c	/^static int scull_getwritespace(struct scull_pipe *dev, struct file *filp)$/;"	f	file:	signature:(struct scull_pipe *dev, struct file *filp)
scull_init_module	main.c	/^int scull_init_module(void)$/;"	f	signature:(void)
scull_init_module	main.c	/^module_init(scull_init_module);$/;"	v
scull_ioctl	main.c	/^long scull_ioctl(struct file *filp,$/;"	f	signature:(struct file *filp, unsigned int cmd, unsigned long arg)
scull_ioctl	scull.h	/^long     scull_ioctl(struct file *filp,$/;"	p	signature:(struct file *filp, unsigned int cmd, unsigned long arg)
scull_listitem	access.c	/^struct scull_listitem {$/;"	s	file:
scull_listitem::device	access.c	/^	struct scull_dev device;$/;"	m	struct:scull_listitem	typeref:struct:scull_listitem::scull_dev	file:	access:public
scull_listitem::key	access.c	/^	dev_t key;$/;"	m	struct:scull_listitem	file:	access:public
scull_listitem::list	access.c	/^	struct list_head list;$/;"	m	struct:scull_listitem	typeref:struct:scull_listitem::list_head	file:	access:public
scull_llseek	main.c	/^loff_t scull_llseek(struct file *filp, loff_t off, int whence)$/;"	f	signature:(struct file *filp, loff_t off, int whence)
scull_llseek	scull.h	/^loff_t  scull_llseek(struct file *filp, loff_t off, int whence);$/;"	p	signature:(struct file *filp, loff_t off, int whence)
scull_major	main.c	/^int scull_major =   SCULL_MAJOR;$/;"	v
scull_minor	main.c	/^int scull_minor =   0;$/;"	v
scull_nr_devs	main.c	/^int scull_nr_devs = SCULL_NR_DEVS;	\/* number of bare scull devices *\/$/;"	v
scull_open	main.c	/^int scull_open(struct inode *inode, struct file *filp)$/;"	f	signature:(struct inode *inode, struct file *filp)
scull_p_buffer	pipe.c	/^int scull_p_buffer =  SCULL_P_BUFFER;	\/* buffer size *\/$/;"	v
scull_p_cleanup	pipe.c	/^void scull_p_cleanup(void)$/;"	f	signature:(void)
scull_p_cleanup	scull.h	/^void    scull_p_cleanup(void);$/;"	p	signature:(void)
scull_p_devices	pipe.c	/^static struct scull_pipe *scull_p_devices;$/;"	v	typeref:struct:scull_pipe	file:
scull_p_devno	pipe.c	/^dev_t scull_p_devno;			\/* Our first device number *\/$/;"	v
scull_p_fasync	pipe.c	/^static int scull_p_fasync(int fd, struct file *filp, int mode)$/;"	f	file:	signature:(int fd, struct file *filp, int mode)
scull_p_fasync	pipe.c	/^static int scull_p_fasync(int fd, struct file *filp, int mode);$/;"	p	file:	signature:(int fd, struct file *filp, int mode)
scull_p_init	pipe.c	/^int scull_p_init(dev_t firstdev)$/;"	f	signature:(dev_t firstdev)
scull_p_init	scull.h	/^int     scull_p_init(dev_t dev);$/;"	p	signature:(dev_t dev)
scull_p_nr_devs	pipe.c	/^static int scull_p_nr_devs = SCULL_P_NR_DEVS;	\/* number of pipe devices *\/$/;"	v	file:
scull_p_open	pipe.c	/^static int scull_p_open(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_p_poll	pipe.c	/^static unsigned int scull_p_poll(struct file *filp, poll_table *wait)$/;"	f	file:	signature:(struct file *filp, poll_table *wait)
scull_p_read	pipe.c	/^static ssize_t scull_p_read (struct file *filp, char __user *buf, size_t count,$/;"	f	file:	signature:(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
scull_p_release	pipe.c	/^static int scull_p_release(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_p_setup_cdev	pipe.c	/^static void scull_p_setup_cdev(struct scull_pipe *dev, int index)$/;"	f	file:	signature:(struct scull_pipe *dev, int index)
scull_p_write	pipe.c	/^static ssize_t scull_p_write(struct file *filp, const char __user *buf, size_t count,$/;"	f	file:	signature:(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
scull_pipe	pipe.c	/^struct scull_pipe {$/;"	s	file:
scull_pipe::async_queue	pipe.c	/^        struct fasync_struct *async_queue; \/* asynchronous readers *\/$/;"	m	struct:scull_pipe	typeref:struct:scull_pipe::fasync_struct	file:	access:public
scull_pipe::buffer	pipe.c	/^        char *buffer, *end;                \/* begin of buf, end of buf *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::buffersize	pipe.c	/^        int buffersize;                    \/* used in pointer arithmetic *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::cdev	pipe.c	/^        struct cdev cdev;                  \/* Char device structure *\/$/;"	m	struct:scull_pipe	typeref:struct:scull_pipe::cdev	file:	access:public
scull_pipe::end	pipe.c	/^        char *buffer, *end;                \/* begin of buf, end of buf *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::inq	pipe.c	/^        wait_queue_head_t inq, outq;       \/* read and write queues *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::mutex	pipe.c	/^        struct mutex mutex;              \/* mutual exclusion semaphore *\/$/;"	m	struct:scull_pipe	typeref:struct:scull_pipe::mutex	file:	access:public
scull_pipe::nreaders	pipe.c	/^        int nreaders, nwriters;            \/* number of openings for r\/w *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::nwriters	pipe.c	/^        int nreaders, nwriters;            \/* number of openings for r\/w *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::outq	pipe.c	/^        wait_queue_head_t inq, outq;       \/* read and write queues *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::rp	pipe.c	/^        char *rp, *wp;                     \/* where to read, where to write *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_pipe::wp	pipe.c	/^        char *rp, *wp;                     \/* where to read, where to write *\/$/;"	m	struct:scull_pipe	file:	access:public
scull_priv_fops	access.c	/^struct file_operations scull_priv_fops = {$/;"	v	typeref:struct:file_operations
scull_proc_open	main.c	/^static int scull_proc_open(struct inode *inode, struct file *file)$/;"	f	file:	signature:(struct inode *inode, struct file *file)
scull_proc_ops	main.c	/^static struct file_operations scull_proc_ops = {$/;"	v	typeref:struct:file_operations	file:
scull_qset	main.c	/^int scull_qset =    SCULL_QSET;$/;"	v
scull_qset	scull.h	/^struct scull_qset {$/;"	s
scull_qset::data	scull.h	/^	void **data;$/;"	m	struct:scull_qset	access:public
scull_qset::next	scull.h	/^	struct scull_qset *next;$/;"	m	struct:scull_qset	typeref:struct:scull_qset::scull_qset	access:public
scull_quantum	main.c	/^int scull_quantum = SCULL_QUANTUM;$/;"	v
scull_read	main.c	/^ssize_t scull_read(struct file *filp, char __user *buf, size_t count,$/;"	f	signature:(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
scull_read	scull.h	/^ssize_t scull_read(struct file *filp, char __user *buf, size_t count,$/;"	p	signature:(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
scull_read_mem_proc_show	main.c	/^static int scull_read_mem_proc_show(struct seq_file *m, void *v)$/;"	f	file:	signature:(struct seq_file *m, void *v)
scull_read_p_mem_proc_show	pipe.c	/^static int scull_read_p_mem_proc_show(struct seq_file *m, void *v)$/;"	f	file:	signature:(struct seq_file *m, void *v)
scull_release	main.c	/^int scull_release(struct inode *inode, struct file *filp)$/;"	f	signature:(struct inode *inode, struct file *filp)
scull_remove_proc	main.c	/^static void scull_remove_proc(void)$/;"	f	file:	signature:(void)
scull_s_available	access.c	/^static atomic_t scull_s_available = ATOMIC_INIT(1);$/;"	v	file:
scull_s_device	access.c	/^static struct scull_dev scull_s_device;$/;"	v	typeref:struct:scull_dev	file:
scull_s_open	access.c	/^static int scull_s_open(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_s_release	access.c	/^static int scull_s_release(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_seq_next	main.c	/^static void *scull_seq_next(struct seq_file *s, void *v, loff_t *pos)$/;"	f	file:	signature:(struct seq_file *s, void *v, loff_t *pos)
scull_seq_ops	main.c	/^static struct seq_operations scull_seq_ops = {$/;"	v	typeref:struct:seq_operations	file:
scull_seq_show	main.c	/^static int scull_seq_show(struct seq_file *s, void *v)$/;"	f	file:	signature:(struct seq_file *s, void *v)
scull_seq_start	main.c	/^static void *scull_seq_start(struct seq_file *s, loff_t *pos)$/;"	f	file:	signature:(struct seq_file *s, loff_t *pos)
scull_seq_stop	main.c	/^static void scull_seq_stop(struct seq_file *s, void *v)$/;"	f	file:	signature:(struct seq_file *s, void *v)
scull_setup_cdev	main.c	/^static void scull_setup_cdev(struct scull_dev *dev, int index)$/;"	f	file:	signature:(struct scull_dev *dev, int index)
scull_sngl_fops	access.c	/^struct file_operations scull_sngl_fops = {$/;"	v	typeref:struct:file_operations
scull_trim	main.c	/^int scull_trim(struct scull_dev *dev)$/;"	f	signature:(struct scull_dev *dev)
scull_trim	scull.h	/^int     scull_trim(struct scull_dev *dev);$/;"	p	signature:(struct scull_dev *dev)
scull_u_count	access.c	/^static int scull_u_count;	\/* initialized to 0 by default *\/$/;"	v	file:
scull_u_device	access.c	/^static struct scull_dev scull_u_device;$/;"	v	typeref:struct:scull_dev	file:
scull_u_open	access.c	/^static int scull_u_open(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_u_owner	access.c	/^static uid_t scull_u_owner;	\/* initialized to 0 by default *\/$/;"	v	file:
scull_u_release	access.c	/^static int scull_u_release(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_user_fops	access.c	/^struct file_operations scull_user_fops = {$/;"	v	typeref:struct:file_operations
scull_w_available	access.c	/^static inline int scull_w_available(void)$/;"	f	file:	signature:(void)
scull_w_count	access.c	/^static int scull_w_count;	\/* initialized to 0 by default *\/$/;"	v	file:
scull_w_device	access.c	/^static struct scull_dev scull_w_device;$/;"	v	typeref:struct:scull_dev	file:
scull_w_open	access.c	/^static int scull_w_open(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_w_owner	access.c	/^static uid_t scull_w_owner;	\/* initialized to 0 by default *\/$/;"	v	file:
scull_w_release	access.c	/^static int scull_w_release(struct inode *inode, struct file *filp)$/;"	f	file:	signature:(struct inode *inode, struct file *filp)
scull_write	main.c	/^ssize_t scull_write(struct file *filp, const char __user *buf, size_t count,$/;"	f	signature:(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
scull_write	scull.h	/^ssize_t scull_write(struct file *filp, const char __user *buf, size_t count,$/;"	p	signature:(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
scull_wusr_fops	access.c	/^struct file_operations scull_wusr_fops = {$/;"	v	typeref:struct:file_operations
sculldev	access.c	/^	struct scull_dev *sculldev;$/;"	m	struct:scull_adev_info	typeref:struct:scull_adev_info::scull_dev	file:	access:public
size	scull.h	/^	unsigned long size;       \/* amount of data stored here *\/$/;"	m	struct:scull_dev	access:public
spacefree	pipe.c	/^static int spacefree(struct scull_pipe *dev)$/;"	f	file:	signature:(struct scull_pipe *dev)
spacefree	pipe.c	/^static int spacefree(struct scull_pipe *dev);$/;"	p	file:	signature:(struct scull_pipe *dev)
wp	pipe.c	/^        char *rp, *wp;                     \/* where to read, where to write *\/$/;"	m	struct:scull_pipe	file:	access:public
